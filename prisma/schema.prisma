// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  username String? @unique

  accounts Account[]
  sessions Session[]

  seenVocabularyPacks SeenVocabularyPack[]

  Like           Like[]
  VocabularyPack VocabularyPack[]
}

model Vocabulary {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  word            String
  reading         String?
  meaning         String?
  sentence        String?
  englishSentence String? @map("en-sentence")
  sound           String?
  sentenceSound   String?
  hint            String?

  vocabularyPack   VocabularyPack @relation(fields: [vocabularyPackId], references: [id], onDelete: Cascade)
  vocabularyPackId String         @db.ObjectId
}

model VocabularyPack {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  vocabularyCount Int      @default(0)
  counted         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  vocabulary         Vocabulary[]
  SeenVocabularyPack SeenVocabularyPack[]
  likes              Like[]

  @@unique([name])
}

model Like {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  vocabularyPack   VocabularyPack @relation(fields: [vocabularyPackId], references: [id])
  vocabularyPackId String         @db.ObjectId

  @@unique([userId, vocabularyPackId])
}

model SeenVocabularyPack {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  vocabularyPack   VocabularyPack @relation(fields: [vocabularyPackId], references: [id])
  vocabularyPackId String         @db.ObjectId
  currentPage      Int            @default(0)
  finished         Boolean        @default(false)

  @@unique([userId, vocabularyPackId])
}
